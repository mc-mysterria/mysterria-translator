name: deploy.yml

on:
  push:
    branches: [ main, production ]
    paths:
      - 'src/**'
      - 'config/**'
      - 'worlds/**'
      - 'pom.xml'
      - 'build.gradle'
      - 'build.gradle.kts'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout deployment config
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/minecraft-deployment-config
          token: ${{ secrets.CONFIG_REPO_TOKEN }}
          path: .deployment-config

      - name: Load deployment configuration
        run: |
          set -e
          REPO_NAME="${{ github.repository }}"
          ENV_NAME="${{ github.ref_name }}"

          echo "🔧 Loading configuration for $REPO_NAME ($ENV_NAME)"

          SERVER_CONFIG=".deployment-config/servers.json"
          if [ ! -f "$SERVER_CONFIG" ]; then
            echo "❌ Server configuration file not found"
            exit 1
          fi

          SERVER_DATA=$(jq --arg repo "$REPO_NAME" --arg env "$ENV_NAME" '
            if .[$repo] then
              (
                .defaults // {}
                * (.[$repo] | del(.environments))
                * ( .[$repo].environments[$env] // {} )
              )
            else
              error("No configuration found for repository: " + $repo)
            end
          ' "$SERVER_CONFIG")

          SERVER_ID=$(echo "$SERVER_DATA" | jq -r '.server_id // empty')
          PELICAN_URL=$(echo "$SERVER_DATA" | jq -r '.pelican_url // empty')
          BACKUP_ENABLED=$(echo "$SERVER_DATA" | jq -r '.backup_enabled // true')

          if [ -z "$SERVER_ID" ] || [ -z "$PELICAN_URL" ]; then
            echo "❌ server_id and pelican_url are required"
            exit 1
          fi

          echo "SERVER_ID=$SERVER_ID" >> $GITHUB_ENV
          echo "PELICAN_URL=$PELICAN_URL" >> $GITHUB_ENV
          echo "BACKUP_ENABLED=$BACKUP_ENABLED" >> $GITHUB_ENV

          # Inject API keys
          echo "ULTRA_API_KEY=${{ secrets.ULTRA_API_KEY }}" >> $GITHUB_ENV
          echo "PELICAN_API_KEY=${{ secrets.PELICAN_API_KEY }}" >> $GITHUB_ENV

          echo "✅ Config loaded for server $SERVER_ID ($PELICAN_URL)"

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build plugin
        run: |
          echo "🔍 Detecting build system..."
          if [ -f "pom.xml" ]; then
            echo "📦 Maven project"
            mvn clean package -DskipTests
            PLUGIN_FILE=$(find . -name "*.jar" -path "*/target/*" -not -name "original-*.jar" | head -n 1)
          elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            echo "📦 Gradle project"
            chmod +x gradlew
            ./gradlew clean build
            PLUGIN_FILE=$(find . -name "*.jar" -path "*/build/libs/*" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -n 1)
          elif [ -d "plugins" ] && [ "$(ls -A plugins/*.jar 2>/dev/null)" ]; then
            echo "📦 Pre-built plugin detected"
            PLUGIN_FILE=$(ls plugins/*.jar | head -n 1)
          else
            echo "❌ No plugin found"
            exit 1
          fi

          if [ -z "$PLUGIN_FILE" ]; then
            echo "❌ Plugin JAR not found"
            exit 1
          fi

          mkdir -p plugins
          cp "$PLUGIN_FILE" plugins/plugin.jar
          echo "PLUGIN_NAME=$(basename "$PLUGIN_FILE" .jar)" >> $GITHUB_ENV
          echo "✅ Built plugin: $(basename "$PLUGIN_FILE")"

      - name: Validate plugin
        run: |
          echo "🔍 Validating plugin..."
          if jar tf plugins/plugin.jar >/dev/null 2>&1; then
            echo "✅ $(basename plugins/plugin.jar) is a valid jar"
          else
            echo "❌ Invalid jar file"
            exit 1
          fi

      - name: Remove old plugin
        run: |
          echo "🗑 Removing old plugins..."
          RESPONSE=$(curl -s \
            -H "Authorization: Bearer $PELICAN_API_KEY" \
            "$PELICAN_URL/api/client/servers/$SERVER_ID/files/list?directory=%2Fplugins")
          FILES=$(echo "$RESPONSE" | jq -r '.data[]? | select(.attributes.is_file and (.attributes.name | endswith(".jar"))) | .attributes.name')
          for file in $FILES; do
            curl -s -X POST \
              -H "Authorization: Bearer $PELICAN_API_KEY" \
              -H "Content-Type: application/json" \
              "$PELICAN_URL/api/client/servers/$SERVER_ID/files/delete" \
              -d "{\"root\":\"/plugins\",\"files\":[\"$file\"]}"
            echo "Deleted $file"
          done

      - name: Upload new plugin
        run: |
          echo "📤 Uploading plugin..."
          UPLOAD_URL=$(curl -s \
            -H "Authorization: Bearer $PELICAN_API_KEY" \
            "$PELICAN_URL/api/client/servers/$SERVER_ID/files/upload" \
            | jq -r '.attributes.url')
          curl -s -X POST \
            -H "Authorization: Bearer $PELICAN_API_KEY" \
            -F "files=@plugins/plugin.jar" \
            "$UPLOAD_URL&directory=%2Fplugins"
          echo "✅ Plugin uploaded"

      - name: Upload deployment manifest
        run: |
          echo "📄 Uploading manifest..."
          UPLOAD_URL=$(curl -s \
            -H "Authorization: Bearer $PELICAN_API_KEY" \
            "$PELICAN_URL/api/client/servers/$SERVER_ID/files/upload" \
            | jq -r '.attributes.url')
          cat > deployment-manifest.json <<EOF
          {
            "timestamp":"$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit":"${{ github.sha }}",
            "branch":"${{ github.ref_name }}",
            "repository":"${{ github.repository }}",
            "plugin":"$PLUGIN_NAME",
            "server_id":"$SERVER_ID",
            "pelican_url":"$PELICAN_URL"
          }
          EOF
          curl -s -X POST \
            -H "Authorization: Bearer $PELICAN_API_KEY" \
            -F "files=@deployment-manifest.json" \
            "$UPLOAD_URL&directory=%2F"
          echo "✅ Manifest uploaded"