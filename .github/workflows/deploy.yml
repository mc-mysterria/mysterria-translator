name: deploy.yml

on:
  push:
    branches: [ main, production ]
    paths:
      - 'src/**'
      - 'config/**'
      - 'worlds/**'
      - 'pom.xml'
      - 'build.gradle'
      - 'build.gradle.kts'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Init step
        run: echo "Workflow triggered successfully! Proceeding..."

  build:
    runs-on: ubuntu-latest
    outputs:
      targets: ${{ steps.config.outputs.targets }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout deployment config
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/minecraft-deployment-config
          token: ${{ secrets.CONFIG_REPO_TOKEN }}
          path: .deployment-config

      - name: Load deployment targets
        id: config
        run: |
          set -e
          REPO_NAME="${{ github.repository }}"
          SERVER_CONFIG=".deployment-config/servers.json"

          if [ ! -f "$SERVER_CONFIG" ]; then
            echo "❌ Server configuration file not found"
            exit 1
          fi

          TARGETS=$(jq -c --arg repo "$REPO_NAME" '
            if .[$repo] then
              [
                # If environments exist, expand them
                ( .[$repo].environments | to_entries[]? | {
                  name: .key,
                  server_id: .value.server_id,
                  pelican_url: .value.pelican_url,
                  api_key_secret: .value.api_key_secret
                } ),
                # Otherwise, take top-level if server_id exists
                ( .[$repo] | select(has("server_id")) | {
                  name: "default",
                  server_id: .server_id,
                  pelican_url: .pelican_url,
                  api_key_secret: .api_key_secret
                } )
              ]
            else
              []
            end
          ' "$SERVER_CONFIG")

          echo "$TARGETS" | jq .
          echo "targets=$TARGETS" >> $GITHUB_OUTPUT

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build plugin
        run: |
          echo "🔍 Detecting build system..."
          if [ -f "pom.xml" ]; then
            echo "📦 Maven project"
            mvn clean package -DskipTests
            PLUGIN_FILE=$(find . -name "*.jar" -path "*/target/*" -not -name "original-*.jar" | head -n 1)
          elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            echo "📦 Gradle project"
            chmod +x gradlew
            ./gradlew clean build
            PLUGIN_FILE=$(find . -name "*.jar" -path "*/build/libs/*" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -n 1)
          elif [ -d "plugins" ] && [ "$(ls -A plugins/*.jar 2>/dev/null)" ]; then
            echo "📦 Pre-built plugin detected"
            PLUGIN_FILE=$(ls plugins/*.jar | head -n 1)
          else
            echo "❌ No plugin found"
            exit 1
          fi

          if [ -z "$PLUGIN_FILE" ]; then
            echo "❌ Plugin JAR not found"
            exit 1
          fi

          mkdir -p plugins
          cp "$PLUGIN_FILE" plugins/plugin.jar
          echo "PLUGIN_NAME=$(basename "$PLUGIN_FILE" .jar)" >> $GITHUB_ENV
          echo "✅ Built plugin: $(basename "$PLUGIN_FILE")"

      - name: Upload plugin artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin
          path: plugins/plugin.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: ${{ fromJson(needs.build.outputs.targets) }}
    steps:
      - name: Download built plugin
        uses: actions/download-artifact@v4
        with:
          name: plugin
          path: plugins

      - name: Deploy to server
        run: |
          SERVER_ID="${{ matrix.target.server_id }}"
          PELICAN_URL="${{ matrix.target.pelican_url }}"
          API_KEY_SECRET="${{ matrix.target.api_key_secret }}"
          API_KEY="${{ secrets[matrix.target.api_key_secret] }}"

          echo "📤 Deploying to $SERVER_ID ($PELican_URL)"

          # Remove old plugins
          RESPONSE=$(curl -s \
            -H "Authorization: Bearer $API_KEY" \
            "$PELICAN_URL/api/client/servers/$SERVER_ID/files/list?directory=%2Fplugins")
          FILES=$(echo "$RESPONSE" | jq -r '.data[]? | select(.attributes.is_file and (.attributes.name | endswith(".jar"))) | .attributes.name')
          for file in $FILES; do
            curl -s -X POST \
              -H "Authorization: Bearer $API_KEY" \
              -H "Content-Type: application/json" \
              "$PELICAN_URL/api/client/servers/$SERVER_ID/files/delete" \
              -d "{\"root\":\"/plugins\",\"files\":[\"$file\"]}"
            echo "Deleted $file"
          done

          # Upload new plugin
          UPLOAD_URL=$(curl -s \
            -H "Authorization: Bearer $API_KEY" \
            "$PELICAN_URL/api/client/servers/$SERVER_ID/files/upload" \
            | jq -r '.attributes.url')

          curl -s -X POST \
            -H "Authorization: Bearer $API_KEY" \
            -F "files=@plugins/plugin.jar" \
            "$UPLOAD_URL&directory=%2Fplugins"

          echo "✅ Uploaded plugin to $SERVER_ID"

      - name: Upload manifest
        run: |
          SERVER_ID="${{ matrix.target.server_id }}"
          PELICAN_URL="${{ matrix.target.pelican_url }}"
          API_KEY_SECRET="${{ matrix.target.api_key_secret }}"
          API_KEY="${{ secrets[matrix.target.api_key_secret] }}"

          UPLOAD_URL=$(curl -s \
            -H "Authorization: Bearer $API_KEY" \
            "$PELICAN_URL/api/client/servers/$SERVER_ID/files/upload" \
            | jq -r '.attributes.url')

          cat > deployment-manifest.json <<EOF
          {
            "timestamp":"$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit":"${{ github.sha }}",
            "branch":"${{ github.ref_name }}",
            "repository":"${{ github.repository }}",
            "plugin":"${{ github.repository }}",
            "server_id":"$SERVER_ID",
            "pelican_url":"$PELICAN_URL"
          }
          EOF

          curl -s -X POST \
            -H "Authorization: Bearer $API_KEY" \
            -F "files=@deployment-manifest.json" \
            "$UPLOAD_URL&directory=%2F"

          echo "✅ Manifest uploaded for $SERVER_ID"